{"version":3,"sources":["components/DataDetail.js","components/Facebook.js","store/actions/projectActions.js","App.js","serviceWorker.js","store/reducers/projectReducer.js","store/reducers/rootReducer.js","index.js"],"names":["DataDetail","projects","this","props","data","map","m","birthday","react_default","a","createElement","className","key","userID","src","picture","alt","name","email","gender","hometown","Component","connect","state","Facebook","isLoggedIn","accessToken","logout","localStorage","clear","_this","setState","responseFacebook","response","undefined","setItem","url","id","getItem","createProject","fbContent","onClick","href","components_DataDetail","facebook_login_with_button_default","appId","autoLoad","fields","callback","onLogin","icon","dispatch","project","type","App","components_Facebook","Boolean","window","location","hostname","match","projectReducer","arguments","length","action","concat","Object","toConsumableArray","assign","rootReducer","combineReducers","store","createStore","compose","applyMiddleware","thunk","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a8d4b344.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nclass DataDetail extends Component {\r\n    render () {\r\n        const {projects} = this.props\r\n\r\n        let data = (projects) ? projects.map(m => {\r\n            if (m.birthday !== 'undefined') {\r\n                return (\r\n                    <div className=\"user-info\" key={m.userID}>\r\n                         <img src={m.picture} alt={m.name}/>\r\n                         <h3>{m.name}</h3>\r\n                         <h4>{m.email}</h4>\r\n                         <h4>{m.gender}</h4>\r\n                         <h4>{m.birthday}</h4>\r\n                         <h4>{m.hometown}</h4>\r\n                         {/* {m.posts.map(e => {\r\n                             return (\r\n                                 <h2>{e}</h2>\r\n                             )\r\n                         })} */}\r\n                         {/* if you have a premissions for posts api */}\r\n                    </div>  \r\n                )\r\n            } else {\r\n                return (\r\n                     <div className=\"user-info\" key={m.userID}>\r\n                         <img src={m.picture} alt={m.name}/>\r\n                         <h3>{m.name}</h3>\r\n                         <h4>{m.email}</h4>\r\n                    </div> \r\n                )\r\n            }\r\n        }) : (\r\n            <div>\r\n                <span>There was some mistake, please, try to login again</span>\r\n            </div>\r\n        )\r\n       \r\n\r\n        return (\r\n            <div>\r\n               {data && data}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        projects : state.projects\r\n    }\r\n}\r\n\r\nexport default connect (mapStateToProps)(DataDetail)","import React, { Component } from 'react'\r\nimport FacebookLogin from 'react-facebook-login'\r\nimport DataDetail from '../components/DataDetail'\r\nimport {connect} from 'react-redux'\r\nimport {createProject} from '../store/actions/projectActions'\r\n\r\n class Facebook extends Component {\r\n    state = {\r\n        isLoggedIn : false,\r\n        userID: '',\r\n        accessToken : '',\r\n        name : 'here should be your name',\r\n        email : 'here should be your email',\r\n        picture : '',\r\n        hometown : 'here should be your hometown',\r\n        birthday : 'here should be your birthday',\r\n        gender : 'here should be your gender'\r\n    }\r\n\r\n    logout = () => {\r\n        localStorage.clear();\r\n        this.setState({\r\n            isLoggedIn : false\r\n        })\r\n    }\r\n\r\n    responseFacebook = response => {\r\n            if( response.name !== undefined) {\r\n                localStorage.setItem('userPicture', response.picture.data.url);\r\n                localStorage.setItem('userID', response.id);\r\n                localStorage.setItem('userName', response.name);\r\n                localStorage.setItem('userEmail', response.email);\r\n                localStorage.setItem('accessToken', response.accessToken);\r\n                localStorage.setItem('gender', response.gender);\r\n                localStorage.setItem('birthday', response.birthday);\r\n                if (response.hometown !== undefined ) {\r\n                    localStorage.setItem('hometown', response.hometown.name);\r\n                }\r\n\r\n                this.setState({\r\n                    isLoggedIn : true,\r\n                    name :  localStorage.getItem('userName'),\r\n                    email: localStorage.getItem('userEmail'),\r\n                    userID : localStorage.getItem('userID'),\r\n                    accessToken :  localStorage.getItem('accessToken'),\r\n                    picture : localStorage.getItem('userPicture'),\r\n                    gender : localStorage.getItem('gender'),\r\n                    birthday : localStorage.getItem('birthday'),\r\n                    hometown : localStorage.getItem('hometown')\r\n                })\r\n                this.props.createProject(this.state);\r\n            }\r\n        \r\n    }\r\n\r\n    render() {\r\n\r\n        let fbContent;\r\n\r\n        if (this.state.isLoggedIn) {\r\n            \r\n                fbContent = (\r\n                       <div className='logged-content'>\r\n                            <div className='logout' onClick={this.logout} href=\"#\">Logout</div>\r\n                            <DataDetail/>\r\n                       </div>\r\n                );\r\n                     \r\n        } else {\r\n            fbContent = (\r\n                <div>\r\n                <FacebookLogin\r\n                    appId=\"2094913534134846\"\r\n                    autoLoad={true}\r\n                    fields=\"name,email,picture,gender,birthday,hometown\"\r\n                    //simply add the word \"posts\" after coma to retreive the posts\r\n                    callback={this.responseFacebook}\r\n                    onLogin={this.responseFacebook}\r\n                    icon=\"fa-facebook\"\r\n                     />\r\n                </div>\r\n                    );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {fbContent}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        createProject: (project) => dispatch(createProject(project))\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Facebook)\r\n","export const createProject = (project) => {\r\n    return (dispatch) => {\r\n        dispatch({type: 'CREATE_PROJECT', project})\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Facebook from './components/Facebook'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Facebook/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const projectReducer = (state = [], action) => {\r\n    switch (action.type){\r\n        case 'CREATE_PROJECT' : \r\n            return [\r\n                 ...state,\r\n            Object.assign({}, action.project)\r\n            ]\r\n            // return state;\r\n        default: \r\n        return state;\r\n    }\r\n}\r\n\r\nexport default projectReducer","import projectReducer from './projectReducer'\r\nimport {combineReducers} from 'redux'\r\n\r\nconst rootReducer = combineReducers({\r\n    projects: projectReducer\r\n}) \r\n\r\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore, applyMiddleware, compose} from 'redux'\nimport {Provider} from 'react-redux'\nimport rootReducer from './store/reducers/rootReducer'\nimport thunk from 'redux-thunk'\n\n\nconst store = createStore(rootReducer, compose(applyMiddleware(thunk)));\n    \nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}